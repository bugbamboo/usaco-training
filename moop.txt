import java.io.*;
import java.util.*;

public class moop {
    public static void main(String[] args) throws IOException {
        BufferedReader f = new BufferedReader(new FileReader("moop.in"));
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("moop.out")),true);
        int PointNum = Integer.parseInt(f.readLine());
        PointG[] points = new PointG[PointNum];
        HashMap<PointG,Integer> map = new HashMap<>();
        for(int i=0; i<PointNum; i++){
            StringTokenizer st = new StringTokenizer(f.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken());
            points[i] =new PointG(x,y);
            map.put(points[i],i);
        }
        DisjointUnionS set = new DisjointUnionS(PointNum);

        Arrays.sort(points, new Comparator<PointG>() {
            @Override
            public int compare(PointG pointG, PointG t1) {
               if(pointG.x<=t1.x && pointG.y<=t1.y){
                   set.union(map.get(pointG),map.get(t1));
                   return -1;
               }
               if(pointG.x>=t1.x && pointG.y>=t1.y){
                   set.union(map.get(pointG),map.get(t1));
                   return 1;
                }
               return 0;
            }
        });
        HashSet<Integer> set1= new HashSet<>();
        for(int i=0; i<PointNum; i++){
            set1.add(set.find(i));
        }
        out.println(set1.size());
        out.close();

    }
}
class PointG{
    int x;
    int y;
    public PointG(int x, int y){
        this.x=x;
        this.y=y;
    }
}
class DisjointUnionS {
    int[] rank, parent;
    int n;
    public DisjointUnionS(int n) {
        rank = new int[n];
        parent = new int[n];
        this.n = n;
        makeSet();
    }
    void makeSet() {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }

        return parent[x];
    }
    void union(int x, int y) {
        int xRoot = find(x), yRoot = find(y);
        if (xRoot == yRoot) {
            return;
        }
        if (rank[xRoot] < rank[yRoot]) {
            parent[xRoot] = yRoot;
        }
        else if (rank[yRoot] < rank[xRoot]) {
            parent[yRoot] = xRoot;
        }
        else
        {
            parent[yRoot] = xRoot;
            rank[xRoot] = rank[xRoot] + 1;
        }
    }
}