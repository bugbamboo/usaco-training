import java.io.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.StringTokenizer;

public class swap {
    public static void main(String[] args) throws IOException {
        BufferedReader f = new BufferedReader(new FileReader("swap.in"));
        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("swap.out")),true);
        StringTokenizer st = new StringTokenizer(f.readLine());
        int Num = Integer.parseInt(st.nextToken());
        int numswaps = Integer.parseInt(st.nextToken());
        int numrounds = Integer.parseInt(st.nextToken());
        int[][] swaps= new int[numswaps][2];
        for(int i=0; i<numswaps; i++){
            st = new StringTokenizer(f.readLine());
            swaps[i][0]= Integer.parseInt(st.nextToken())-1;
            swaps[i][1]=Integer.parseInt(st.nextToken())-1;
        }

        int[] nums = new int[Num];
        for(int i=0; i<Num; i++){
            nums[i]=i;
        }
        for(int[] swap : swaps){
            for(int i=swap[0]; i<=(swap[1]+swap[0])/2; i++){
                int temp = nums[i];
                nums[i]=nums[swap[0]-i+swap[1]];
                nums[swap[0]-i+swap[1]]=temp;
            }

        }
        int[] targets = new int[Num];
        for(int i=0; i<Num; i++){
            targets[nums[i]]=i;
        }
        int[] ending = new int[Num];
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<Num; i++){
            if(!set.contains(i)) {
                
                int point = i;
                int iter = 0;
                ArrayList<Integer> moves = new ArrayList<>();
                moves.add(i);
                while (iter < numrounds) {
                    point = targets[point];
                    moves.add(point);
                    iter++;
                    if (point == i) {
                        break;
                    }

                }

                int howmany;
                if (numrounds == iter) {
                    howmany = numrounds;
                    ending[moves.get(howmany)] = i + 1;
                    set.add(i);
                } else {
                    for (int x = 1; x < moves.size(); x++) {
                        if (!set.contains(moves.get(x))) {
                            howmany = (numrounds + x) % iter;
                            ending[moves.get(howmany)] = moves.get(x) + 1;
                            set.add(moves.get(x));
                        }
                    }
                }
            }

        }
        for(int i :ending){
            out.println(i);
        }
        out.close();
    }
}
